from fastapi import FastAPI, HTTPException, Depends, Query, BackgroundTasks, Path
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import func, text, distinct
from sqlalchemy.orm import Session
from typing import Optional, List, Dict, Any
from datetime import datetime
import os
import sys
import logging
from pydantic import BaseModel
import json
from collections import defaultdict
from flight_parsers import parse_coord, convert_coord, parse_flight_duration, parse_time
import geopandas as gpd

from fastapi import UploadFile, File
from excel_parser import ExcelParser
from data_processor import DataProcessor
from postgres_loader import PostgresLoader 


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(__file__))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from database import engine, SessionLocal, get_db
from dependencies import get_cache_key, get_cached_data, set_cached_data

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
TARGET_TABLE = "excel_data_result_1"

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
class RegionCreate(BaseModel):
    name: str
    description: Optional[str] = None

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="–ë–í–° API", version="1.0.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def _find_column_case_insensitive(db: Session, table_name: str, target_columns: List[str]) -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞."""
    try:
        result = db.execute(text("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = :table_name
            AND table_schema = 'public'
        """), {"table_name": table_name})

        existing_columns = [row[0] for row in result.fetchall()]
        target_columns_lower = [col.lower() for col in target_columns]

        for existing_col in existing_columns:
            if existing_col.lower() in target_columns_lower:
                return existing_col
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–ª–æ–Ω–∫–∏: {e}")
        return None

def _execute_safe_query(db: Session, query: str, params: Optional[Dict] = None) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫."""
    try:
        logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å: {query}")
        result = db.execute(text(query), params or {})
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

def _get_required_columns(db: Session) -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫."""
    columns_mapping = {
        "reg": ["reg", "REG", "registration", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"],
        "opr": ["opr", "OPR", "operator", "–æ–ø–µ—Ä–∞—Ç–æ—Ä"],
        "typ": ["typ", "TYP", "type", "—Ç–∏–ø"],
        "dep": ["dep", "DEP", "departure", "–≤—ã–ª–µ—Ç"],
        "dest": ["dest", "DEST", "destination", "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"],
        "flight_zone_radius": ["flight_zone_radius", "FLIGHT_ZONE_RADIUS", "radius", "—Ä–∞–¥–∏—É—Å"],
        "flight_level": ["flight_level", "FLIGHT_LEVEL", "level", "—É—Ä–æ–≤–µ–Ω—å"],
        "departure_time": ["departure_time", "DEPARTURE_TIME", "departure", "–≤—Ä–µ–º—è_–≤—ã–ª–µ—Ç–∞"],
        "arrival_time": ["arrival_time", "ARRIVAL_TIME", "arrival", "–≤—Ä–µ–º—è_–ø—Ä–∏–±—ã—Ç–∏—è"]
    }

    result = {}
    for key, variants in columns_mapping.items():
        column = _find_column_case_insensitive(db, TARGET_TABLE, variants)
        if column:
            result[key] = column

    return result

@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ë–í–° API...")
    db = SessionLocal()
    try:
        table_exists = db.execute(text("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name = :table_name
            )
        """), {"table_name": TARGET_TABLE}).scalar()

        if table_exists:
            record_count = db.execute(text(f"SELECT COUNT(*) FROM {TARGET_TABLE}")).scalar()
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {TARGET_TABLE} –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {record_count}")

            columns_result = db.execute(text("""
                SELECT column_name, data_type
                FROM information_schema.columns
                WHERE table_name = :table_name
                ORDER BY ordinal_position
            """), {"table_name": TARGET_TABLE})

            columns = [f"{row[0]} ({row[1]})" for row in columns_result]
            logger.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {columns}")
        else:
            logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {TARGET_TABLE} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/admin/parse-excel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        db.close()

@app.get("/")
async def get_main_data(db: Session = Depends(get_db)):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        columns = _get_required_columns(db)
        logger.info(f"Required columns: {columns}")  # –î–µ–±–∞–≥ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ fallback –¥–ª—è 'dep'
        if "dep" not in columns or columns["dep"] is None:
            columns["dep"] = 'dep_1'  # –§–æ–ª–ª–±—ç–∫ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É
            logger.warning("Fallback to 'dep_1' for dep column, as 'dep' not found")

        if not all(columns.values()):
            missing = [k for k, v in columns.items() if not v]
            raise HTTPException(status_code=400, detail=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        select_columns = [
            f'"{columns["reg"]}" as reg',
            f'"{columns["opr"]}" as opr',
            f'"{columns["typ"]}" as typ',
            f'"{columns["dep"]}" as dep',  # –¢–µ–ø–µ—Ä—å columns["dep"] = 'dep_1'
            f'"{columns["dest"]}" as dest',
            f'"{columns["flight_zone_radius"]}" as flight_zone_radius',
            f'"{columns["flight_level"]}" as flight_level',
            f'"{columns["departure_time"]}" as departure_time',
            f'"{columns["arrival_time"]}" as arrival_time'
        ]

        query = f"SELECT {', '.join(select_columns)} FROM {TARGET_TABLE}"
        result = _execute_safe_query(db, query)

        data = [dict(row) for row in result.mappings().all()]
        return {
            "data": data,
            "count": len(data),
            "columns": list(columns.keys())
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/statistics")
async def get_statistics(
    limit: Optional[int] = Query(None, description="–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π"),
    offset: int = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ"),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_exists = db.execute(text("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name = :table_name
            )
        """), {"table_name": TARGET_TABLE}).scalar()

        if not table_exists:
            raise HTTPException(status_code=404, detail=f"–¢–∞–±–ª–∏—Ü–∞ {TARGET_TABLE} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_count_result = db.execute(text(f"SELECT COUNT(*) FROM {TARGET_TABLE}"))
        total_count = total_count_result.scalar() or 0  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ total_count –Ω–µ None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if limit is None:
            result = db.execute(text(f"SELECT * FROM {TARGET_TABLE} OFFSET :offset"), {"offset": offset})
        else:
            result = db.execute(
                text(f"SELECT * FROM {TARGET_TABLE} LIMIT :limit OFFSET :offset"),
                {"limit": limit, "offset": offset}
            )

        columns = result.keys()
        data = [dict(zip(columns, row)) for row in result.fetchall()]

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É has_more
        has_more = False
        if limit is not None and total_count is not None:
            has_more = (offset + limit) < total_count

        return {
            "data": data,
            "pagination": {
                "limit": limit,
                "offset": offset,
                "total": total_count,
                "has_more": has_more
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /statistics: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")
    
@app.get("/city/{city_name}")
async def get_city_data(
    city_name: str = Path(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –ï–° –û–†–í–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π')"),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ï–° –û–†–í–î"""
    try:
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ü–µ–Ω—Ç—Ä–æ–º –ï–° –û–†–í–î
        center_column = _find_column_case_insensitive(db, TARGET_TABLE, [
            "tsentr_es_orvd", "TSENTR_ES_ORVD", "—Ü–µ–Ω—Ç—Ä", "center"
        ])

        if not center_column:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω—Ç—Ä–æ–º –ï–° –û–†–í–î (tsentr_es_orvd)"
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
        query = f"""
            SELECT * FROM {TARGET_TABLE}
            WHERE "{center_column}" = :city_name
        """

        result = _execute_safe_query(db, query, {"city_name": city_name})

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        columns = result.keys()
        data = []
        for row in result.fetchall():
            row_dict = dict(zip(columns, row))
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø–æ–ª—è
            for key, value in row_dict.items():
                if isinstance(value, datetime):
                    row_dict[key] = value.isoformat()
            data.append(row_dict)

        return {
            "center": city_name,
            "data": data,
            "count": len(data),
            "column_used": center_column
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /city/{city_name}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.post("/admin/regions")
async def add_region( 
    region: RegionCreate,
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω (–∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –≤ –±–∞–∑—É
        regions_table = "regions"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É —Ä–µ–≥–∏–æ–Ω–æ–≤

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
        table_exists = db.execute(text("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name = :table_name
            )
        """), {"table_name": regions_table}).scalar()

        if not table_exists:
            raise HTTPException(status_code=404, detail=f"–¢–∞–±–ª–∏—Ü–∞ {regions_table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
        insert_query = f"""
            INSERT INTO {regions_table} (name, description)
            VALUES (:name, :description)
            RETURNING id
        """

        result = db.execute(text(insert_query), {
            "name": region.name,
            "description": region.description
        })

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        fetched = result.fetchone()
        if fetched is None:
            db.rollback()
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")

        new_region_id = fetched[0]
        db.commit()

        return {
            "status": "success",
            "region_id": new_region_id,
            "region_name": region.name,
            "message": "–†–µ–≥–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
        }
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")
@app.get("/health")
async def health():
    return {"status": "OK", "timestamp": datetime.now().isoformat()}



def init_region_map():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ shapefile"""
    try:
        gdf = gpd.read_file("RF/RF.shp")
        gdf = gdf.to_crs(epsg=4326)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(gdf)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
        return gdf
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
        return None
    

##### =============================================================================
##### =============================================================================
##### =============================================================================

@app.get("/cities")
async def get_cities(
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤/—Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ü–µ–Ω—Ç—Ä–æ–º –ï–° –û–†–í–î
        center_column = _find_column_case_insensitive(db, TARGET_TABLE, [
            "tsentr_es_orvd", "TSENTR_ES_ORVD", "—Ü–µ–Ω—Ç—Ä", "center"
        ])

        if not center_column:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω—Ç—Ä–æ–º –ï–° –û–†–í–î"
            )

        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = f"""
            SELECT DISTINCT "{center_column}" as city
            FROM {TARGET_TABLE}
            WHERE "{center_column}" IS NOT NULL 
            AND "{center_column}" != ''
        """

        params = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å search –ø–∞—Ä–∞–º–µ—Ç—Ä
        if search:
            query += f' AND "{center_column}" ILIKE :search'
            params["search"] = f"%{search}%"

        query += " ORDER BY city LIMIT 20"

        result = _execute_safe_query(db, query, params)
        cities = [row[0] for row in result.fetchall()]

        return {
            "cities": cities,
            "total": len(cities),
            "search_term": search
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /cities: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/stats/regions", response_model=List[Dict])
def get_stats_regions(db: Session = Depends(get_db)):
    try:
        query = text("SELECT tsentr_es_orvd, departure_time, arrival_time FROM excel_data_result_1")
        result = db.execute(query).mappings().all()  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        stats = {}
        for row in result:
            region = row["tsentr_es_orvd"]
            dep = parse_time(row["departure_time"])
            arr = parse_time(row["arrival_time"])

            if not region or not dep or not arr:
                continue

            duration = (arr - dep).total_seconds() / 60
            if duration < 0:
                duration += 24 * 60

            if region not in stats:
                stats[region] = {"num_flights": 0, "total_duration": 0}

            stats[region]["num_flights"] += 1
            stats[region]["total_duration"] += duration

        result_list = []
        for region, data in stats.items():
            avg_duration = data["total_duration"] / data["num_flights"] if data["num_flights"] > 0 else 0
            result_list.append({
                "region": region,
                "num_flights": data["num_flights"],
                "avg_flight_duration": round(avg_duration, 2)
            })

        return result_list

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@app.get("/stats/region/{region_name}")
def region_stats(region_name: str, db: Session = Depends(get_db)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω—É:
    - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤
    - —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ (–º–∏–Ω—É—Ç—ã)
    """
    try:
        query = text("""
            SELECT departure_time, arrival_time
            FROM excel_data_result_1
            WHERE tsentr_es_orvd = :region
        """)
        result = db.execute(query, {"region": region_name}).fetchall()

        if not result:
            raise HTTPException(status_code=404, detail="–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        durations = []
        for row in result:
            dur = parse_flight_duration(row[0], row[1])
            if dur is not None:
                durations.append(dur)

        total_flights = len(durations)
        avg_duration = sum(durations) / total_flights if total_flights else 0

        return {
            "region": region_name,
            "total_flights": total_flights,
            "average_duration_minutes": round(avg_duration, 2)
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@app.get("/flights/points", response_model=List[Dict])
def get_flight_points(db: Session = Depends(get_db)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤–∑–ª–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤: id + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    """
    try:
        query = text("SELECT id, dep_1 FROM excel_data_result_1 WHERE dep_1 IS NOT NULL")
        result = db.execute(query)
        points = []

        for row in result.fetchall():
            # row[0] - —ç—Ç–æ id, row[1] - dep_1
            coords = convert_coord(row[1])
            if coords["latitude"] is not None and coords["longitude"] is not None:
                points.append({
                    "id": row[0],
                    "latitude": coords["latitude"],
                    "longitude": coords["longitude"]
                })
        return points
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—á–µ–∫: {e}")
    

@app.get("/flights/{flight_id}")
async def get_flight_zone(
    flight_id: int = Path(..., description="ID –ø–æ–ª–µ—Ç–∞"),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–æ–Ω–µ –ø–æ–ª–µ—Ç–∞ –¥—Ä–æ–Ω–∞"""
    try:
        # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        radius_column = _find_column_case_insensitive(db, TARGET_TABLE, [
            "flight_zone_radius", "FLIGHT_ZONE_RADIUS", "radius", "—Ä–∞–¥–∏—É—Å", "flight_zone_radi"
        ])
        
        zone_column = _find_column_case_insensitive(db, TARGET_TABLE, [
            "flight_zone", "FLIGHT_ZONE", "zone", "–∑–æ–Ω–∞"
        ])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ—Ç–∞
        result = db.execute(
            text("SELECT * FROM excel_data_result_1 WHERE id = :flight_id"),
            {"flight_id": flight_id}
        )
        flight_data = result.fetchone()
        
        if not flight_data:
            raise HTTPException(status_code=404, detail="–ü–æ–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        columns = result.keys()
        flight_dict = dict(zip(columns, flight_data))
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∑–ª–µ—Ç–∞ –∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
        dep_coords = parse_coord(flight_dict.get("dep_1", ""))
        dest_coords = parse_coord(flight_dict.get("dest", ""))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ —Ç–æ—á–∫–∏ –≤–∑–ª–µ—Ç–∞ –∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
        takeoff_point = {
            "raw": flight_dict.get("dep_1"),
            "latitude": dep_coords[0],
            "longitude": dep_coords[1]
        }
        
        landing_point = {
            "raw": flight_dict.get("dest"), 
            "latitude": dest_coords[0],
            "longitude": dest_coords[1]
        }
        
        points_match = (
            dep_coords[0] == dest_coords[0] and 
            dep_coords[1] == dest_coords[1] and
            flight_dict.get("dep_1") == flight_dict.get("dest")
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
        departure_time = flight_dict.get("departure_time") or ""
        arrival_time = flight_dict.get("arrival_time") or ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "flight_id": flight_id,
            "flight_zone": flight_dict.get(zone_column) if zone_column else None,
            "flight_zone_radius": flight_dict.get(radius_column) if radius_column else None,
            "takeoff_point": takeoff_point,
            "landing_point": landing_point if not points_match else None,
            "flight_time": {
                "departure_time": departure_time,
                "arrival_time": arrival_time,
                "duration_minutes": parse_flight_duration(departure_time, arrival_time)
            },
            "registration_number": flight_dict.get("reg"),
            "date_of_flight": flight_dict.get("dof"),
            "operator": flight_dict.get("opr"),
            "additional_info": {
                "flight_level": flight_dict.get("flight_level"),
                "aircraft_type": flight_dict.get("typ"),
                "remarks": flight_dict.get("rmk")
            }
        }
        
        return response_data
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /flights/{flight_id}/flight_zone: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–æ–Ω–µ –ø–æ–ª–µ—Ç–∞: {str(e)}")
        
@app.get("/stats/regions/monthly")
async def get_regions_monthly_stats(db: Session = Depends(get_db)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –º–µ—Å—è—Ü–∞–º"""
    try:
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞—Ç–æ–π –ø–æ–ª–µ—Ç–∞
        date_column = _find_column_case_insensitive(db, TARGET_TABLE, [
            "dof", "DOF", "date_of_flight", "date", "–¥–∞—Ç–∞"
        ])
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ä–µ–≥–∏–æ–Ω–æ–º (—Ü–µ–Ω—Ç—Ä–æ–º –ï–° –û–†–í–î)
        region_column = _find_column_case_insensitive(db, TARGET_TABLE, [
            "tsentr_es_orvd", "TSENTR_ES_ORVD", "—Ü–µ–Ω—Ç—Ä", "center", "region"
        ])

        if not date_column or not region_column:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–∞—Ç–∞ –∏ —Ä–µ–≥–∏–æ–Ω)"
            )

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –º–µ—Å—è—Ü–∞–º
        query = text(f"""
            SELECT 
                "{region_column}" as region,
                EXTRACT(YEAR FROM TO_DATE("{date_column}", 'DDMMYY')) as year,
                EXTRACT(MONTH FROM TO_DATE("{date_column}", 'DDMMYY')) as month,
                COUNT(*) as flight_count
            FROM {TARGET_TABLE}
            WHERE "{date_column}" IS NOT NULL 
            AND "{date_column}" != ''
            AND "{region_column}" IS NOT NULL
            AND "{region_column}" != ''
            GROUP BY "{region_column}", year, month
            ORDER BY "{region_column}", year, month
        """)

        result = db.execute(query)
        stats_data = result.fetchall()

        # –°–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 
            9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        formatted_data = {}
        
        for row in stats_data:
            region = row[0]
            year = int(row[1]) if row[1] else None
            month = int(row[2]) if row[2] else None
            count = row[3]
            
            if region and year and month:
                if region not in formatted_data:
                    formatted_data[region] = {}
                
                year_key = str(year)
                if year_key not in formatted_data[region]:
                    formatted_data[region][year_key] = {}
                
                month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
                formatted_data[region][year_key][month_name] = count

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        current_year = datetime.now().year
        current_month = datetime.now().month
        
        for region in formatted_data:
            for year in formatted_data[region]:
                year_int = int(year)
                # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Å—è—Ü—ã
                # –î–ª—è –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 12 –º–µ—Å—è—Ü–µ–≤
                max_month = current_month if year_int == current_year else 12
                
                for month_num in range(1, max_month + 1):
                    month_name = month_names[month_num]
                    if month_name not in formatted_data[region][year]:
                        formatted_data[region][year][month_name] = 0

        return {
            "stats": formatted_data,
            "total_regions": len(formatted_data),
            "columns_used": {
                "date_column": date_column,
                "region_column": region_column
            }
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats/regions/monthly: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º: {str(e)}")        

@app.post("/api/upload")
async def upload_file(file: UploadFile = File(...), db: Session = Depends(get_db)):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {file.filename}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
        contents = await file.read()
        temp_filename = f"temp_{file.filename}"
        with open(temp_filename, "wb") as f:
            f.write(contents)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {temp_filename}")

        # –ü–∞—Ä—Å–∏–º Excel
        excel_parser = ExcelParser()
        excel_parser.excel_file_path = temp_filename
        all_sheets = excel_parser.read_all_excel_sheets()
        logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(all_sheets)}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –ë–î
        data_processor = DataProcessor(db_session=db)
        
        total_records = 0
        for sheet_name, df in all_sheets.items():
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: {sheet_name}, —Å—Ç—Ä–æ–∫: {len(df)}")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –ü–†–ê–í–ò–õ–¨–ù–û
            df_cleaned = DataProcessor.clean_dataframe(df)  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
            logger.info(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(df_cleaned)} —Å—Ç—Ä–æ–∫")
            
            if not df_cleaned.empty:
                # –î–µ—à–∏—Ñ—Ä—É–µ–º –ø–æ–ª—è –ø–ª–∞–Ω–∞ –ø–æ–ª–µ—Ç–∞
                df_decoded = data_processor.decode_flight_plan_fields(df_cleaned)
                logger.info(f"–ü–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {len(df_decoded)} —Å—Ç—Ä–æ–∫")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                result = data_processor.save_to_table_with_id(df_decoded, TARGET_TABLE)
                total_records += result.get("added", 0)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É: {result.get('added', 0)} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.warning(f"–õ–∏—Å—Ç {sheet_name} –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_filename)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

        return {
            "message": f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_sheets)} –ª–∏—Å—Ç–æ–≤, {total_records} –∑–∞–ø–∏—Å–µ–π –≤ {TARGET_TABLE}",
            "sheets_processed": len(all_sheets),
            "records_added": total_records
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            if 'temp_filename' in locals():
                os.remove(temp_filename)
        except:
            pass
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
