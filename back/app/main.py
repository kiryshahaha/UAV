from fastapi import FastAPI, HTTPException, Depends, Query, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import func, text
from sqlalchemy.orm import Session
from typing import Optional, List
from datetime import datetime, date, timedelta
import os
import sys
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(__file__))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from models import Flight, FlightResponse, AnalyticsResponse, RegionStats, Base
from database import engine, SessionLocal, get_db
from dependencies import get_cache_key, get_cached_data, set_cached_data

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="–ë–í–° API", version="1.0.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
migration_status = {"running": False, "completed": False, "error": None}

async def run_auto_migration():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è"""
    try:
        migration_status["running"] = True
        print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ...")
        
        from data_integrator import DataIntegrator
        integrator = DataIntegrator()
        migrated_count = integrator.migrate_all_tables()
        
        migration_status["completed"] = True
        migration_status["running"] = False
        print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {migrated_count} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        migration_status["error"] = str(e)
        migration_status["running"] = False
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI"""
    Base.metadata.create_all(bind=engine)

    from migrations import upgrade_database
    upgrade_database()
    print("üöÄ –ó–∞–ø—É—Å–∫ –ë–í–° API...")
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    db = SessionLocal()
    try:
        flight_count = db.query(Flight).count()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ flights: {flight_count}")
        
        if flight_count == 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –ø–∞—Ä—Å–µ—Ä–∞
            result = db.execute(text("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' AND table_name LIKE '%excel_data%'
            """))
            parser_tables = [row[0] for row in result]
            
            if parser_tables:
                print(f"üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä—Å–µ—Ä–∞: {len(parser_tables)}")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
                asyncio.create_task(run_auto_migration())
            else:
                print("üí° –¢–∞–±–ª–∏—Ü—ã –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/admin/parse-excel")
        else:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        db.close()

@app.get("/migration-status")
async def get_migration_status():
    """–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    return migration_status

# –ë–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    return {
        "message": "–ë–í–° API —Ä–∞–±–æ—Ç–∞–µ—Ç", 
        "version": "1.0.0",
        "migration_status": migration_status
    }

@app.get("/health")
async def health():
    return {"status": "OK", "timestamp": datetime.now()}
# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.post("/api/admin/parse-excel")
async def parse_excel_file(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'excel_to_postgres'))
        from main import main_standard
        
        def run_parser():
            try:
                print("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Excel...")
                main_standard()
                print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        
        background_tasks.add_task(run_parser)
        
        return {
            "status": "started", 
            "message": "–ü–∞—Ä—Å–∏–Ω–≥ Excel –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except ImportError as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

@app.post("/api/admin/migrate-data")
async def migrate_parser_data(background_tasks: BackgroundTasks):
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü –ø–∞—Ä—Å–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É flights"""
    try:
        from data_integrator import DataIntegrator
        
        def run_migration():
            try:
                print("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
                integrator = DataIntegrator()
                migrated_count = integrator.migrate_all_tables()
                print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {migrated_count}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        
        background_tasks.add_task(run_migration)
        
        return {
            "status": "started",
            "message": "–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

@app.get("/api/admin/available-tables")
async def get_available_tables(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –ë–î"""
    try:
        result = db.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """))
        tables = [row[0] for row in result]
        return {"tables": tables}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

# –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–∞–Ω–Ω—ã—Ö
@app.get("/api/analytics/dashboard")
async def get_dashboard_analytics(
    period: str = Query("30d", description="–ü–µ—Ä–∏–æ–¥: 7d, 30d, 90d, 1y, all"),
    db: Session = Depends(get_db)
):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    cache_key = get_cache_key("dashboard", period=period)
    cached = get_cached_data(cache_key)
    if cached:
        return cached
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    total_flights_count = db.query(Flight).count()
    
    if total_flights_count == 0:
        return {
            "status": "no_data",
            "message": "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ª–µ—Ç–∞—Ö",
            "suggestion": "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ Excel –∏ –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ /api/admin/parse-excel –∏ /api/admin/migrate-data",
            "total_flights": 0,
            "total_regions": 0,
            "total_drones": 0,
            "period": period,
            "last_updated": datetime.utcnow().isoformat(),
            "top_regions": []
        }
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
    today = datetime.utcnow().date()
    if period == "7d":
        start_date = today - timedelta(days=7)
    elif period == "30d":
        start_date = today - timedelta(days=30)
    elif period == "90d":
        start_date = today - timedelta(days=90)
    elif period == "1y":
        start_date = today - timedelta(days=365)
    else:
        start_date = date(2000, 1, 1)  # –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_flights = db.query(Flight).filter(Flight.created_at >= start_date).count()
    total_regions = db.query(Flight.region).filter(Flight.created_at >= start_date).distinct().count()
    total_drones = db.query(Flight.aircraft_id).filter(Flight.created_at >= start_date).distinct().count()
    
    # –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–µ—Ç–æ–≤
    top_regions_query = db.query(
        Flight.region,
        func.count(Flight.id).label('flights_count'),
        func.count(func.distinct(Flight.aircraft_id)).label('drones_count')
    ).filter(Flight.created_at >= start_date).group_by(Flight.region).order_by(func.count(Flight.id).desc()).limit(10)
    
    top_regions = [
        {"region": r.region, "flights_count": r.flights_count, "drones_count": r.drones_count}
        for r in top_regions_query.all()
    ]
    
    response = {
        "status": "success",
        "total_flights": total_flights,
        "total_regions": total_regions,
        "total_drones": total_drones,
        "period": period,
        "last_updated": datetime.utcnow().isoformat(),
        "top_regions": top_regions
    }
    
    set_cached_data(cache_key, response)
    return response

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
@app.get("/flights/")
async def get_flights(
    region: Optional[str] = Query(None),
    aircraft_type: Optional[str] = Query(None),
    limit: int = Query(default=100, le=1000),
    db: Session = Depends(get_db)
):
    # SQL –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    base_query = "SELECT * FROM flights WHERE 1=1"
    params = {}
    
    if region:
        base_query += " AND region = :region"
        params['region'] = region
    if aircraft_type:
        base_query += " AND aircraft_type = :aircraft_type"
        params['aircraft_type'] = aircraft_type
        
    base_query += f" LIMIT {limit}"
    
    result = db.execute(text(base_query), params)
    columns = result.keys()
    flights = result.fetchall()
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º dict –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    return [dict(zip(columns, flight)) for flight in flights]


@app.get("/statistics/overview")
async def get_statistics(db: Session = Depends(get_db)):
    total_flights = db.query(Flight).count()
    total_regions = db.query(Flight.region).distinct().count()
    top_regions = db.query(Flight.region, func.count(Flight.id).label('count')).group_by(Flight.region).order_by(func.count(Flight.id).desc()).limit(5).all()
    top_aircraft = db.query(Flight.aircraft_type, func.count(Flight.id).label('count')).filter(Flight.aircraft_type.isnot(None)).group_by(Flight.aircraft_type).order_by(func.count(Flight.id).desc()).limit(5).all()
    
    return {
        "total_flights": total_flights,
        "total_regions": total_regions,
        "top_regions": [{"region": r.region, "count": r.count} for r in top_regions],
        "top_aircraft_types": [{"aircraft_type": r.aircraft_type, "count": r.count} for r in top_aircraft]
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)