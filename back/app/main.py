from fastapi import FastAPI, HTTPException, Depends, Query, BackgroundTasks, Path
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import func, text, distinct
from sqlalchemy.orm import Session
from typing import Optional, List, Dict, Any
from datetime import datetime
import os
import sys
import logging
from pydantic import BaseModel
import json
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(__file__))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from database import engine, SessionLocal, get_db
from dependencies import get_cache_key, get_cached_data, set_cached_data

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
TARGET_TABLE = "excel_data_result_1"

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
class RegionCreate(BaseModel):
    name: str
    description: Optional[str] = None

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="–ë–í–° API", version="1.0.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def _find_column_case_insensitive(db: Session, table_name: str, target_columns: List[str]) -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞."""
    try:
        result = db.execute(text("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = :table_name
            AND table_schema = 'public'
        """), {"table_name": table_name})

        existing_columns = [row[0] for row in result.fetchall()]
        target_columns_lower = [col.lower() for col in target_columns]

        for existing_col in existing_columns:
            if existing_col.lower() in target_columns_lower:
                return existing_col
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–ª–æ–Ω–∫–∏: {e}")
        return None

def _execute_safe_query(db: Session, query: str, params: Optional[Dict] = None) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫."""
    try:
        logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å: {query}")
        result = db.execute(text(query), params or {})
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

def _get_required_columns(db: Session) -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫."""
    columns_mapping = {
        "reg": ["reg", "REG", "registration", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"],
        "opr": ["opr", "OPR", "operator", "–æ–ø–µ—Ä–∞—Ç–æ—Ä"],
        "typ": ["typ", "TYP", "type", "—Ç–∏–ø"],
        "dep": ["dep", "DEP", "departure", "–≤—ã–ª–µ—Ç"],
        "dest": ["dest", "DEST", "destination", "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"],
        "flight_zone_radius": ["flight_zone_radius", "FLIGHT_ZONE_RADIUS", "radius", "—Ä–∞–¥–∏—É—Å"],
        "flight_level": ["flight_level", "FLIGHT_LEVEL", "level", "—É—Ä–æ–≤–µ–Ω—å"],
        "departure_time": ["departure_time", "DEPARTURE_TIME", "departure", "–≤—Ä–µ–º—è_–≤—ã–ª–µ—Ç–∞"],
        "arrival_time": ["arrival_time", "ARRIVAL_TIME", "arrival", "–≤—Ä–µ–º—è_–ø—Ä–∏–±—ã—Ç–∏—è"]
    }

    result = {}
    for key, variants in columns_mapping.items():
        column = _find_column_case_insensitive(db, TARGET_TABLE, variants)
        if column:
            result[key] = column

    return result

@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ë–í–° API...")
    db = SessionLocal()
    try:
        table_exists = db.execute(text("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name = :table_name
            )
        """), {"table_name": TARGET_TABLE}).scalar()

        if table_exists:
            record_count = db.execute(text(f"SELECT COUNT(*) FROM {TARGET_TABLE}")).scalar()
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {TARGET_TABLE} –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {record_count}")

            columns_result = db.execute(text("""
                SELECT column_name, data_type
                FROM information_schema.columns
                WHERE table_name = :table_name
                ORDER BY ordinal_position
            """), {"table_name": TARGET_TABLE})

            columns = [f"{row[0]} ({row[1]})" for row in columns_result]
            logger.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: {columns}")
        else:
            logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {TARGET_TABLE} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/admin/parse-excel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        db.close()

@app.get("/")
async def get_main_data(db: Session = Depends(get_db)):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        columns = _get_required_columns(db)
        if not all(columns.values()):
            missing = [k for k, v in columns.items() if not v]
            raise HTTPException(status_code=400, detail=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        select_columns = [
            f'"{columns["reg"]}" as reg',
            f'"{columns["opr"]}" as opr',
            f'"{columns["typ"]}" as typ',
            f'"{columns["dep"]}" as dep',
            f'"{columns["dest"]}" as dest',
            f'"{columns["flight_zone_radius"]}" as flight_zone_radius',
            f'"{columns["flight_level"]}" as flight_level',
            f'"{columns["departure_time"]}" as departure_time',
            f'"{columns["arrival_time"]}" as arrival_time'
        ]

        query = f"SELECT {', '.join(select_columns)} FROM {TARGET_TABLE}"
        result = _execute_safe_query(db, query)

        data = [dict(row) for row in result.mappings().all()]

        return {
            "data": data,
            "count": len(data),
            "columns": list(columns.keys())
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

@app.get("/statistics")
async def get_statistics(
    limit: Optional[int] = Query(None, description="–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π"),
    offset: int = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ"),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_exists = db.execute(text("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name = :table_name
            )
        """), {"table_name": TARGET_TABLE}).scalar()

        if not table_exists:
            raise HTTPException(status_code=404, detail=f"–¢–∞–±–ª–∏—Ü–∞ {TARGET_TABLE} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_count_result = db.execute(text(f"SELECT COUNT(*) FROM {TARGET_TABLE}"))
        total_count = total_count_result.scalar() or 0  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ total_count –Ω–µ None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if limit is None:
            result = db.execute(text(f"SELECT * FROM {TARGET_TABLE} OFFSET :offset"), {"offset": offset})
        else:
            result = db.execute(
                text(f"SELECT * FROM {TARGET_TABLE} LIMIT :limit OFFSET :offset"),
                {"limit": limit, "offset": offset}
            )

        columns = result.keys()
        data = [dict(zip(columns, row)) for row in result.fetchall()]

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É has_more
        has_more = False
        if limit is not None and total_count is not None:
            has_more = (offset + limit) < total_count

        return {
            "data": data,
            "pagination": {
                "limit": limit,
                "offset": offset,
                "total": total_count,
                "has_more": has_more
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /statistics: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")
    
@app.get("/city/{city_name}")
async def get_city_data(
    city_name: str = Path(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –ï–° –û–†–í–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π')"),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ï–° –û–†–í–î"""
    try:
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ü–µ–Ω—Ç—Ä–æ–º –ï–° –û–†–í–î
        center_column = _find_column_case_insensitive(db, TARGET_TABLE, [
            "tsentr_es_orvd", "TSENTR_ES_ORVD", "—Ü–µ–Ω—Ç—Ä", "center"
        ])

        if not center_column:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω—Ç—Ä–æ–º –ï–° –û–†–í–î (tsentr_es_orvd)"
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
        query = f"""
            SELECT * FROM {TARGET_TABLE}
            WHERE "{center_column}" = :city_name
        """

        result = _execute_safe_query(db, query, {"city_name": city_name})

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        columns = result.keys()
        data = []
        for row in result.fetchall():
            row_dict = dict(zip(columns, row))
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø–æ–ª—è
            for key, value in row_dict.items():
                if isinstance(value, datetime):
                    row_dict[key] = value.isoformat()
            data.append(row_dict)

        return {
            "center": city_name,
            "data": data,
            "count": len(data),
            "column_used": center_column
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /city/{city_name}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.post("/admin/regions")
async def add_region(
    region: RegionCreate,
    db: Session = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω (–∞–¥–º–∏–Ω—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –≤ –±–∞–∑—É
        regions_table = "regions"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É —Ä–µ–≥–∏–æ–Ω–æ–≤

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
        table_exists = db.execute(text("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name = :table_name
            )
        """), {"table_name": regions_table}).scalar()

        if not table_exists:
            raise HTTPException(status_code=404, detail=f"–¢–∞–±–ª–∏—Ü–∞ {regions_table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
        insert_query = f"""
            INSERT INTO {regions_table} (name, description)
            VALUES (:name, :description)
            RETURNING id
        """

        result = db.execute(text(insert_query), {
            "name": region.name,
            "description": region.description
        })

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        fetched = result.fetchone()
        if fetched is None:
            db.rollback()
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")

        new_region_id = fetched[0]
        db.commit()

        return {
            "status": "success",
            "region_id": new_region_id,
            "region_name": region.name,
            "message": "–†–µ–≥–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
        }
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")
@app.get("/health")
async def health():
    return {"status": "OK", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
