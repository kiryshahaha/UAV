import os
import sys
import subprocess
import logging

logger = logging.getLogger(__name__)

def process_excel_with_external_parser(file_path: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –ø–∞—Ä—Å–µ—Ä excel_to_postgres –∫–∞–∫ subprocess"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(file_path):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞—Ä—Å–µ—Ä—É
        current_dir = os.path.dirname(os.path.abspath(__file__))
        back_dir = os.path.dirname(current_dir)
        parser_dir = os.path.join(back_dir, 'excel_to_postgres')
        parser_main = os.path.join(parser_dir, 'main.py')
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤: {parser_dir}")
        
        if not os.path.exists(parser_main):
            raise FileNotFoundError(f"‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {parser_main}")
        
        logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –Ω–∞–π–¥–µ–Ω: {parser_main}")
        logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {file_path}")
        logger.info(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {parser_dir}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú –ø—É—Ç–µ–º
        env = os.environ.copy()
        env['EXCEL_FILE_PATH'] = os.path.abspath(file_path)
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ñ–∞–π–ª–æ–º: {env['EXCEL_FILE_PATH']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        result = subprocess.run(
            [sys.executable, parser_main],
            cwd=parser_dir,
            env=env,
            capture_output=True,
            text=True,
            timeout=300
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –≤ –≤—ã–≤–æ–¥–µ
            if "–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫" in result.stdout:
                for line in result.stdout.split('\n'):
                    if "–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫" in line:
                        logger.info(f"üìä {line.strip()}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ (–∫–æ–¥ {result.returncode})")
            if result.stderr:
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ—à–∏–±–∫–∏
                error_lines = result.stderr.strip().split('\n')[-5:]
                for line in error_lines:
                    logger.error(f"  {line}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ (5 –º–∏–Ω—É—Ç)")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False